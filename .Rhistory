sp_mass <- read.table(file="data/egypt_mass.txt", header=FALSE)
str(sp_mass)
row_labs_sp <- c("Canis aureus", "Vulpes vulpes", "Lycaon pictus", "Hyaena hyaena", "Crocuta crocuta", "Panthera leo (long maned)", "Panthera leo (short maned)", "Panthera pardus", "Acinonyx jubatus", "Loxodonta africana", "Equus asinus", "Equus grevyi", "Equus quagga", "Diceros/Ceratotherium", "Sus scrofa",  "Phacochoerus aethiopicus", "Hippopotamus amphibius", "Giraffa camelopardalis", "Dama mesopotamica", "Camelus dromedarius", "Taurotragus oryx", "Tragelaphus spekei", "Addax nasomaculatus", "Oryx dammah", "Oryx beisa", "Hippotragus equinus", "Kobus kob", "Kobus megaceros", "Alcelaphus bucelaphus", "Connochaetes taurinus", "Litocranius walleri", "Ammodorcas clarkei", "Gazella dorcas", "Gazella leptoceros", "Gazella soemmerringii", "Capra ibex", "Ammotragus lervia", "Bos primigenius", "Syncerus caffer")
## Set 1 for predators, 0 for prey
carnivores <- c(rep(1, 9), rep(0, length(row_labs_sp)- 9))
names(carnivores) <- row_labs_sp
# above species names -> row_labs_sp
# to label row names of species occurrence and body size matrices
rownames(sp_occ) <- row_labs_sp
# leave columns of species occurence matrixes as V1, V2 etc
# set column names of mass matrix as "f", "m"
colnames(sp_mass) <- c("f", "m")
rownames(sp_mass) <- row_labs_sp
head(sp_occ)
head(sp_mass)
alpha <- 2.51
beta <- 0.79
gamma <- -0.37
inv_logit <- function(x) exp(x)/(1+exp(x))
#body-size $m_i$ and a prey of body-size $m_j$ is given by:
probEat <- function(alpha, beta, gamma, mass_1, mass_2){
equation = (alpha) + (beta*log(mass_1/mass_2)) +
gamma*(log(mass_1/mass_2))^2
# using inv_logit to get a 0 or 1 value
return (round((inv_logit(equation)), 2))
}
# calculate all feeding probabilities based on body sizes
# assume all species are the size of females
sp_mass_f <- sp_mass$f
# start with a square matrix of all zeros
adj_matrix <- matrix(0, nrow = nrow(sp_occ), ncol = nrow(sp_occ))
colnames(adj_matrix) <- rownames(adj_matrix) <- rownames(sp_occ)
# using for loop to fill the matrix with probabilities from the function above
for (i in 1:length(row_labs_sp)){
for (j in 1:length(row_labs_sp)) {
adj_matrix[i, j] <- probEat(alpha, beta, gamma, sp_mass_f[i], sp_mass_f[j])
}
}
# use carnivores vector from above to set all feeding interactions of herbivores to 0
#?sweep
# if not a carnivore? set the interactions of herbivores to 0
# so using "carnivores" to id which columns will remain the same and which ones will be zeroed
# https://www.r-bloggers.com/2022/07/how-to-use-the-sweep-function-in-r/
# sweep(x, MARGIN, STATS, FUN)
# x: Name of the matrix
# MARGIN: The margin on which to run the function (1 = rows, 2 = columns)
# STATS: The value(s) to use in the function
# FUN: The function to perform
# using multiplication bc that will multiply the herbivores by 0, making them 0
# TODO confused on whether we're interested in running the function on rows or columns? or does it matter if they both have the same species and number of species?
adj_matrix <- t(adj_matrix)
adj_matrix <- sweep(adj_matrix, 1, carnivores, "*")
adj_matrix <- t(adj_matrix)
# print row/col sums
row_sums <- rowSums(adj_matrix)
col_sums <- colSums(adj_matrix)
print(row_sums)
print(col_sums)
# create web for each time period
# incl only species that were not extinct in the period
# try using the 2nd time period/the second column of 'sp_occ'
present_species <- sp_occ[,2]
# using sweep again, in the same way as above?
adj_matrix <- sweep(adj_matrix, 1, present_species, "*")
adj_matrix <- sweep(adj_matrix, 2, present_species, "*")
# using function 'empty' to empty matrix of rows/cols with no interactions
#adj_matrix_cleaned <- empty(adj_matrix)
print(nrow(adj_matrix))
dim(adj_matrix)
# creating list where each element is a network
# need to use a for loop or lapply
# function for creating a network for one time period
create_network <- function(adj_matrix, present_species) {
# using sweep to zero out rows/columns for extinct species
adj_matrix <- sweep(adj_matrix, 1, present_species, '*')
adj_matrix <- sweep(adj_matrix, 2, present_species, '*')
# using function 'empty' to empty matrix of rows/cols with no interactions
#adj_matrix_cleaned <- empty(adj_matrix)
return (adj_matrix)
}
# initialize empty list to store networks
time_periods <- ncol(sp_occ)
network_list <- vector("list", time_periods)
# using for loop to loop theough each time period to fill network list
for (i in 1:time_periods) {
present_species <- sp_occ[ ,i] # species in the ith time period
network_list[[i]] <- create_network(adj_matrix, present_species)
}
# print first 5 rows and columns of 5th time period
print(network_list[[5]][1:5, 1:5])
# print first 5 rows and columns of 5th time period
print(network_list[[5]][1:5, 1:5])
# convert adj matrices to igrpah class objects
# function: graph_from_adjacency_matrix (x= adj_matrix, mode = "directed", diag = FALSE, weighted = TRUE)
#?graph_from_adjacency_matrix
convert_to_igraph <- function (adj_matrix) {
graph_from_adjacency_matrix(
adj_matrix,
mode = "directed",
diag = FALSE,
weighted = TRUE
)
}
# convert all adj matrices in list to igraph object
igraph_list <- lapply(network_list, convert_to_igraph)
lapply(network_list, dim)
# convert adj matrices to igrpah class objects
# function: graph_from_adjacency_matrix (x= adj_matrix, mode = "directed", diag = FALSE, weighted = TRUE)
#?graph_from_adjacency_matrix
convert_to_igraph <- function (adj_matrix) {
graph_from_adjacency_matrix(
adj_matrix,
mode = "directed",
diag = FALSE,
weighted = TRUE
)
}
# convert all adj matrices in list to igraph object
igraph_list <- lapply(network_list, convert_to_igraph)
## assign groups as carnivore or herbivore
assign_groups <- function(carnivores){
ifelse(carnivores == 1, "carnivore", "herbivore")
}
assign_groups(carnivores)
carnivores
## assign groups as carnivore or herbivore
assign_groups <- function(carnivores){
ifelse(carnivores == 1, "carnivore", "herbivore")
}
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
graph
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], present_species_list[[1]], title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
graph
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], present_species_list[[1]], title = "Network 1")
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
V(i_graph)$group <- assign_groups(carnivores)
V(i_graph)$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
graph
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], , title = "Network 1")
## plot the network
convert_to_3d_network(igraph_list[[1]], network_list[[1]], title = "Network 1")
## assign groups as carnivore or herbivore
assign_groups <- function(carnivores){
ifelse(carnivores == 1, "carnivore", "herbivore")
}
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
igraph
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], network_list[[1]], title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
i_graph
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], network_list[[1]], title = "Network 1")
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
V(i_graph)$group <- assign_groups(carnivores)
V(i_graph)$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
i_graph
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
i_graph
vertex.size = 10
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
i_graph,
vertex.size = 10,
vertex.label = NA
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
i_graph,
vertex.size = 10
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
plot(
i_graph,
vertex.size = 10
vertex.label = NA,
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
i_graph,
vertex.size = 10
vertex.label = NA,
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
i_graph,
vertex.size = 10,
vertex.label = NA,
edge.arrow.size = 0.4
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
i_graph,
vertex.size = 10,
vertex.label = NA,
edge.arrow.size = 0.4,
edge.width = E(i_graph)$weight
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
i_graph,
vertex.size = 10,
vertex.label = NA,
edge.width = E(i_graph)$weight
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
i_graph,
vertex.color = i_graph$color
vertex.size = 10,
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "darkred", "forestgreen")
plot(
i_graph,
vertex.color = i_graph$color,
vertex.size = 10,
vertex.label = NA,
edge.width = E(i_graph)$weight
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "red", "forestgreen")
plot(
i_graph,
vertex.color = i_graph$color,
vertex.size = 10,
vertex.label = NA,
edge.width = E(i_graph)$weight
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "red", "forestgreen")
plot(
i_graph,
vertex.color = i_graph$color,
vertex.size = 10,
vertex.label = NA
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
convert_to_3d_network(igraph_list[[20]], carnivores, title = "Network 20")
convert_to_3d_network(igraph_list[[13]], carnivores, title = "Network 13")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
V(i_graph)$group <- assign_groups(carnivores)
V(i_graph)$color <- ifelse(i_graph$group == "carnivore", "red", "forestgreen")
plot(
V(i_graph),
vertex.color = i_graph$color,
vertex.size = 10,
vertex.label = NA
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
V(i_graph)$group <- assign_groups(carnivores)
V(i_graph)$color <- ifelse(i_graph$group == "carnivore", "red", "forestgreen")
plot(
i_graph,
vertex.color = i_graph$color,
vertex.size = 10,
vertex.label = NA
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
print(assign_groups(carnivores))
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
print(V(i_graph)$name)
V(i_graph)$group <- assign_groups(carnivores)
V(i_graph)$color <- ifelse(i_graph$group == "carnivore", "red", "forestgreen")
plot(
i_graph,
vertex.color = i_graph$color,
vertex.size = 10,
vertex.label = NA
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
## convert to a network 3d object
convert_to_3d_network <- function(i_graph, carnivores, title){
# assigning the different colors
i_graph$group <- assign_groups(carnivores)
i_graph$color <- ifelse(i_graph$group == "carnivore", "red", "forestgreen")
plot(
i_graph,
vertex.color = i_graph$color,
vertex.size = 10,
vertex.label = NA
)
}
## plot the network
convert_to_3d_network(igraph_list[[1]], carnivores, title = "Network 1")
convert_to_3d_network(igraph_list[[20]], carnivores, title = "Network 20")
convert_to_3d_network(igraph_list[[13]], carnivores, title = "Network 13")
convert_to_3d_network(igraph_list[[23]], carnivores, title = "Network 20")
#install.packages("lubridate")\
library(lubridate)
library(tidyverse)
library(tidyverse)
library(sp)
library(tidyverse)
library(sp)
library(sf)
library(prism)
library(prism)
library(terra)
setwd("~/Bee-Urbanization-BI410")
bee_data <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
census_shp <- st_read("Data/CensusBlockGroups/CensusBlockGroups.shp")
census_sf <- census_shp %>%
st_transform(crs = "EPSG:4326") %>%
rename(latitude = INTPTLAT, longitude = INTPTLON) %>%
dplyr::select(latitude, longitude, geometry, POP20, POPDENS20, COUNTY)
bee_sf <- st_as_sf(filtered_bee_data,
coords = c("longitude", "latitude"),
crs = crs("EPSG:4326"))
#install.packages("lubridate")\
library(lubridate)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
setwd("~/Bee-Urbanization-BI410")
# logic behind the day of year: January 1st is day 1, jan 2nd is day 2 etc
# using lubridate
calc_day_of_year <- function(date){
# converting the string object to a Date object
# parses mm/dd/yyyy
date <- mdy(date)
# get day of year
day_of_year <- yday(date)
return (day_of_year)
}
filtered_bee_data <- mutate(filtered_bee_data, DOY = calc_day_of_year(Collection.Date))
bee_data <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
bee_data <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
head(bee_data)
# want to just keep our species from the main dataframe
filtered_bee_data <- bee_data[bee_data$Species %in% c("vosnesenskii", "melanopygus"), ]
colnames(filtered_bee_data)
# want to keep Dec..Lat. and Dec..Long. and Collection.Date and Collection.Day.1
# https://stackoverflow.com/questions/50990412/select-remove-columns-under-conditions-in-dplyr-filter-columns-r
filtered_bee_data <- filtered_bee_data %>%
dplyr::select(Dec..Lat., Dec..Long., Collection.Date, Species, Year.1)
head(filtered_bee_data)
# removing these na rows
filtered_bee_data <- na.omit(filtered_bee_data)
calc_day_of_year <- function(date){
# converting the string object to a Date object
# parses mm/dd/yyyy
date <- mdy(date)
# get day of year
day_of_year <- yday(date)
return (day_of_year)
}
filtered_bee_data <- mutate(filtered_bee_data, DOY = calc_day_of_year(Collection.Date))
month <- seq(as.Date("2020-01-01"),
as.Date("2020-12-01"),
by = "1 month")
month_label <- lubridate::month(month, label = TRUE)
winter.months <- seq(as.Date("2020-09-01"),
as.Date("2021-08-01"),
by = "1 month")
winter.month_label <- lubridate::month(winter.months, label = TRUE)
filtered_bee_data <- filtered_bee_data %>%
mutate(Collection.Date=mdy(Collection.Date)
,year=as.numeric(year(Collection.Date))
,month=month(Collection.Date)
,doy = yday(Collection.Date)
) %>%
arrange(year,doy)
filtered_bee_data <- filtered_bee_data %>% rename(latitude = Dec..Lat., longitude = Dec..Long.)
filtered_bee_data <- mutate(filtered_bee_data,
winter.year = ifelse(month>8, year+1, year)
,winter.month = ifelse(month>8, month-8, month+4)
,winter.day = ifelse(month>8, doy-243, doy+120)
)
filtered_bee_data <- na.omit(filtered_bee_data)
dim(filtered_bee_data)
census <- read.csv("CensusBlockGroups.csv")
census_shp <- st_read("Data/CensusBlockGroups/CensusBlockGroups.shp")
census_sf <- census_shp %>%
st_transform(crs = "EPSG:4326") %>%
rename(latitude = INTPTLAT, longitude = INTPTLON) %>%
dplyr::select(latitude, longitude, geometry, POP20, POPDENS20, COUNTY)
bee_sf <- st_as_sf(filtered_bee_data,
coords = c("longitude", "latitude"),
crs = crs("EPSG:4326"))
census_sf <- st_cast(census_sf, "POLYGON")
bee_with_census <- st_join(bee_sf, census_sf)
bee_with_census
