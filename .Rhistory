library(sf)
library(raster)
library(prism)
library(terra)
setwd("~/Bee-Urbanization-BI410")
bee_data <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
bee_data <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
head(bee_data)
# want to just keep our species from the main dataframe
filtered_bee_data <- bee_data[bee_data$Species %in% c("vosnesenskii", "melanopygus"), ]
colnames(filtered_bee_data)
# want to keep Dec..Lat. and Dec..Long. and Collection.Date and Collection.Day.1
# https://stackoverflow.com/questions/50990412/select-remove-columns-under-conditions-in-dplyr-filter-columns-r
filtered_bee_data <- filtered_bee_data %>%
dplyr::select(Dec..Lat., Dec..Long., Collection.Date, Species, Year.1)
head(filtered_bee_data)
# removing these na rows
filtered_bee_data <- na.omit(filtered_bee_data)
# logic behind the day of year: January 1st is day 1, jan 2nd is day 2 etc
# using lubridate
calc_day_of_year <- function(date){
# converting the string object to a Date object
# parses mm/dd/yyyy
date <- mdy(date)
# get day of year
day_of_year <- yday(date)
return (day_of_year)
}
filtered_bee_data <- mutate(filtered_bee_data, DOY = calc_day_of_year(Collection.Date))
#rows_with_na <- rowSums(is.na(filtered_bee_data)) > 0
#filtered_bee_data[rows_with_na, ]
# row 8791 has Collection.Date of 2018--20
# dropping this row
# row 18851 had Collection.Date of 2019-6-31, this day doesn't exist allegedly there are only 30 days in june
# the rest of the rows without a DOY value don't have a Collection.Date date
#dropping all days missing a DOy value? Which is ~740 values
month <- seq(as.Date("2020-01-01"),
as.Date("2020-12-01"),
by = "1 month")
month_label <- lubridate::month(month, label = TRUE)
winter.months <- seq(as.Date("2020-09-01"),
as.Date("2021-08-01"),
by = "1 month")
winter.month_label <- lubridate::month(winter.months, label = TRUE)
filtered_bee_data <- filtered_bee_data %>%
mutate(Collection.Date=mdy(Collection.Date)
,year=as.numeric(year(Collection.Date))
,month=month(Collection.Date)
,doy = yday(Collection.Date)
) %>%
arrange(year,doy)
filtered_bee_data <- filtered_bee_data %>% rename(latitude = Dec..Lat., longitude = Dec..Long.)
filtered_bee_data <- mutate(filtered_bee_data,
winter.year = ifelse(month>8, year+1, year)
,winter.month = ifelse(month>8, month-8, month+4)
,winter.day = ifelse(month>8, doy-243, doy+120)
)
filtered_bee_data <- na.omit(filtered_bee_data)
dim(filtered_bee_data)
#Adding PRISM Data
prism_set_dl_dir("prism_data")
get_prism_monthlys(
type = "tmean",
year=2016:2021,
mon=1:12,
keepZip = FALSE
)
sub.tmean <- prism_archive_subset("tmean", "monthly", mon = 1:12)
RS <- pd_stack(sub.tmean) ##raster file   # (prism_stack and ls_prism_data deprecated)
bee.test <- filtered_bee_data
bee.spdf <-   SpatialPointsDataFrame(coords=bee.test[,c('longitude','latitude')],
data=bee.test, proj4string = CRS("+proj=longlat +ellps=WGS84 +no_defs"))
bee.clim <- extract(RS, bee.spdf,  fun=mean, na.rm=TRUE, sp=TRUE)
bee.clim <- as.data.frame(bee.clim)
head(bee.clim,2); dim(bee.clim)
bee_long <- pivot_longer(bee.clim, cols=starts_with("PRISM")) %>%
separate(col=name, sep="_", into=c("r1","var","class","res","dd","r2")) %>%
mutate(year.prism=as.numeric(str_sub(dd, 1, 4)),
month.prism=as.numeric(str_sub(dd, 5, 6)))%>%
dplyr::select(-c(r1,r2,latitude.1, longitude.1, dd))
print(bee_long)
dim(bee_long)
bee_long <- bee_long %>%
mutate(winter.year.prism = ifelse(month.prism>8, year.prism+1, year.prism)
,winter.month.prism = ifelse(month.prism>8, month.prism-8, month.prism+4)
,tmean.month = paste(var, winter.month.prism, sep="_")
) %>% filter(winter.year.prism == winter.year) # filter to only the prism data from the same winter-year as the observation
print(bee_long)
dim(bee_long)
bee_long <- bee_long %>%
dplyr::select(-c(month.prism,winter.month.prism, year.prism,class))%>%
print(bee_long)
# pivot back to wide
bee.dat.tmean <- pivot_wider(bee_long, names_from=tmean.month,
values_from=value, values_fn = mean) %>%
dplyr::select(-c(var))
print(bee.dat.tmean)
dim(bee.dat.tmean)
bee.data <- bee.dat.tmean
print(bee.data)
bee_data_wTemp <-  bee.data %>%
rowwise()%>%
mutate(temp=mean(c_across(tmean_1:tmean_9)))
head(bee_data_wTemp) #tmean is set up with september being the 1st month currently, capturing weather before current spring year.
sum(is.na(bee_data_wTemp))
dim(bee_data_wTemp)
dim(filtered_bee_data) #large difference in row numbers, why?
dim(filtered_bee_data)
dim(bee.spdf)
dim(bee.clim)
dim(bee_long)
dim(bee.dat.tmean)
dim(bee_data_wTemp)
census <- read.csv("CensusBlockGroups.csv")
census_shp <- st_read("Data/CensusBlockGroups/CensusBlockGroups.shp")
census_sf <- census_shp %>%
st_transform(crs = "EPSG:4326") %>%
rename(latitude = INTPTLAT, longitude = INTPTLON) %>%
dplyr::select(latitude, longitude, geometry, POP20, POPDENS20, COUNTY)
bee_sf <- st_as_sf(bee_data_wTemp,
coords = c("longitude", "latitude"),
crs = crs("EPSG:4326"))
census_sf <- st_cast(census_sf, "POLYGON")
bee_with_census <- st_join(bee_sf, census_sf)
dim(bee_with_census)
saveRDS(bee_with_census, "Data/final_bee_dataset")
# want to keep columns INTPTLAT, INTPTLON, COUNTY?, NAME?, POP20
bee_with_census
library(lubridate)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
library(lme4)
library(lmerTest)
install.packages(lmerTest)
library(lmerTest)
install.packages("lmerTest")
library(lmerTest)
library(lubridate)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
library(lme4)
library(lmerTest)
setwd("~/Bee-Urbanization-BI410")
head(complete_bee_data)
complete_bee_data <- read_rds("Data/final_bee_dataset")
head(complete_bee_data)
# using quantile function and POP20
# splitting POP20 into 4 even? categories
quantile(complete_bee_data$POP20)
# using quantile function and POP20
# splitting POP20 into 4 even? categories
unique(complete_bee_data$POP20)
# using quantile function and POP20
# splitting POP20 into 4 even? categories
unique(complete_bee_data$POP20, na.rm = TRUE)
# using quantile function and POP20
# splitting POP20 into 4 even? categories
quantile(complete_bee_data$POP20, na.rm = TRUE)
# using quantile function and POP20
# splitting POP20 into 4 even? categories
quantile(complete_bee_data$POPDENS20, na.rm = TRUE)
# using quantile function and POP20
# splitting POP20 into 4 even? categories
quantile(complete_bee_data$POP20, na.rm = TRUE)
# using quantile function and POP20
# splitting POP20 into 4 even? categories
complete_bee_data <- complete_bee_data %>%
mutate(complete_bee_data, urbanization_level = quantile(complete_bee_data$POP20, na.rm = TRUE))
quantile(complete_bee_data)
quantile(data$POP20, na.rm = TRUE)
quantile(complete_bee_data, na.rm =TRUE)
quantile(complete_bee_data$POP20, na.rm =TRUE)
quantile(complete_bee_data$POP20, na.rm =TRUE)[1]
quantile(complete_bee_data$POP20, na.rm =TRUE)[2]
quantile_5 = quantile(data$POP20, na.rm = TRUE)[5]
quantile_5 = quantile(data$POP20, na.rm = TRUE)[5]
quantile_5 = quantile(complete_bee_data$POP20, na.rm = TRUE)[5]
quantile_5
quantile(complete_bee_data$POP20, na.rm = TRUE)
?list
for (i in 1:length(nrow(data)):
if (quantile_1 <= (complete_bee_data$POP20[i]) <= quantile_2){
for (i in 1:length(nrow(data))):
for (i in (1:length(nrow(data)))):
# using quantile function and POP20
# if in quantile 1, give it a number 1
# if in quantile 2, assign it to number 2 etc
assign_urbanization_level <- function(data){
# initialize a list
urbanization_level <- list(nrow(data))
quantile_1 <- quantile(data$POP20, na.rm = TRUE)[1]
quantile_2 <- quantile(data$POP20, na.rm = TRUE)[2]
quantile_3 <- quantile(data$POP20, na.rm = TRUE)[3]
quantile_4 <- quantile(data$POP20, na.rm = TRUE)[4]
quantile_5 <- quantile(data$POP20, na.rm = TRUE)[5]
for (i in 1:(nrow(data))):
for (i in 1:nrow(data)):
# using quantile function and POP20
# if in quantile 1, give it a number 1
# if in quantile 2, assign it to number 2 etc
assign_urbanization_level <- function(data){
# initialize a list
urbanization_level <- list(nrow(data))
quantile_1 <- quantile(data$POP20, na.rm = TRUE)[1]
quantile_2 <- quantile(data$POP20, na.rm = TRUE)[2]
quantile_3 <- quantile(data$POP20, na.rm = TRUE)[3]
quantile_4 <- quantile(data$POP20, na.rm = TRUE)[4]
quantile_5 <- quantile(data$POP20, na.rm = TRUE)[5]
for (i in 1:nrow(data)){
if (quantile_1 <= (complete_bee_data$POP20[i]) <= quantile_2){
library(lubridate)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
library(lme4)
library(lmerTest)
setwd("~/Bee-Urbanization-BI410")
# splitting POP20 into 4 even categories
complete_bee_data <- complete_bee_data %>%
mutate(urbanization_level = sapply(complete_bee_data$POP20, quantile(complete_bee_data$POP20, na.rm = TRUE)))
assign_urbanization_level <- function(data) {
quantiles <- quantile(data$POP20, probs = seq(0 , 1, 0.25), na.rm = TRUE)
data <- data %>%
mutate(urbanization_level = cut(POP20,
breaks = quantiles,
labels = c("rural", "subrural", "suburban", "urban"),
include.lowest = TRUE))
return(data)
}
complete_bee_data <- assign_urbanization_level(complete_bee_data)
complete_bee_data <- complete_bee_data %>%
rowwise() %>%
mutate(springTemp = mean(c_across(c("tmean_6", "tmean_7",
"tmean_8", "tmean_9", "tmean_10")), na.rm = TRUE)) %>%
ungroup()
complete_bee_data <- complete_bee_data %>%
rowwise() %>%
mutate(springTemp = mean(c_across(c("tmean_6", "tmean_7",
"tmean_8", "tmean_9", "tmean_10")), na.rm = TRUE)) %>%
ungroup()
dat <- data.frame(
DOY = complete_bee_data$DOY,
springTemp = complete_bee_data$springTemp,
urbanizationLevel = complete_bee_data$urbanization_level,
species = complete_bee_data$Species,
)
dat <- data.frame(
DOY = complete_bee_data$DOY,
springTemp = complete_bee_data$springTemp,
urbanizationLevel = complete_bee_data$urbanization_level,
species = complete_bee_data$Species
)
formula <- DOY ~ 1 + urbanizationLevel + springTemp + (species | 1)
model1 <- lmer(formula, data = dat)
library(lubridate)
library(tidyverse)
library(tidyverse)
library(sp)
library(sf)
library(prism)
library(prism)
library(terra)
library(lme4)
library(lmerTest)
library(car)
setwd("~/Bee-Urbanization-BI410")
complete_bee_data <- read_rds("Data/final_bee_dataset")
complete_bee_data <- read_rds("Data/final_bee_dataset")
head(complete_bee_data)
getwd()
#install.packages("lubridate")\
library(lubridate)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
setwd("~/Bee-Urbanization-BI410")
bee_data <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
# creating a day of year column
```{r}
calc_day_of_year <- function(date){
# converting the string object to a Date object
# parses mm/dd/yyyy
date <- mdy(date)
# get day of year
day_of_year <- yday(date)
return (day_of_year)
}
filtered_bee_data <- mutate(filtered_bee_data, DOY = calc_day_of_year(Collection.Date))
# removing these na rows
filtered_bee_data <- na.omit(filtered_bee_data)
head(bee_data)
# want to just keep our species from the main dataframe
filtered_bee_data <- bee_data[bee_data$Species %in% c("vosnesenskii", "melanopygus", "mixtus", "californicus", "griseocollis"), ]
colnames(filtered_bee_data)
# want to keep Dec..Lat. and Dec..Long. and Collection.Date and Collection.Day.1
# https://stackoverflow.com/questions/50990412/select-remove-columns-under-conditions-in-dplyr-filter-columns-r
filtered_bee_data <- filtered_bee_data %>%
dplyr::select(Dec..Lat., Dec..Long., Collection.Date, Species, Year.1)
head(filtered_bee_data)
# removing these na rows
filtered_bee_data <- na.omit(filtered_bee_data)
calc_day_of_year <- function(date){
# converting the string object to a Date object
# parses mm/dd/yyyy
date <- mdy(date)
# get day of year
day_of_year <- yday(date)
return (day_of_year)
}
filtered_bee_data <- mutate(filtered_bee_data, DOY = calc_day_of_year(Collection.Date))
month <- seq(as.Date("2020-01-01"),
as.Date("2020-12-01"),
by = "1 month")
month_label <- lubridate::month(month, label = TRUE)
winter.months <- seq(as.Date("2020-09-01"),
as.Date("2021-08-01"),
by = "1 month")
winter.month_label <- lubridate::month(winter.months, label = TRUE)
filtered_bee_data <- filtered_bee_data %>%
mutate(Collection.Date=mdy(Collection.Date)
,year=as.numeric(year(Collection.Date))
,month=month(Collection.Date)
,doy = yday(Collection.Date)
) %>%
arrange(year,doy)
filtered_bee_data <- filtered_bee_data %>% rename(latitude = Dec..Lat., longitude = Dec..Long.)
filtered_bee_data <- mutate(filtered_bee_data,
winter.year = ifelse(month>8, year+1, year)
,winter.month = ifelse(month>8, month-8, month+4)
,winter.day = ifelse(month>8, doy-243, doy+120)
)
filtered_bee_data <- na.omit(filtered_bee_data)
dim(filtered_bee_data)
prism_set_dl_dir("prism_data")
get_prism_monthlys(
type = "tmean",
year=2016:2021,
mon=1:12,
keepZip = FALSE
)
complete_bee_data <- read_rds("Data/final_bee_dataset")
complete_bee_data <- read_rds("Data/final_bee_dataset")
library(lubridate)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
library(lme4)
library(lmerTest)
library(car)
complete_bee_data <- read_rds("Data/final_bee_dataset")
getwd()
#install.packages("lubridate")\
library(lubridate)
library(tidyverse)
library(tidyverse)
library(sp)
library(sf)
library(sf)
library(raster)
library(sf)
library(raster)
library(prism)
library(raster)
library(prism)
library(terra)
bee_data <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
head(bee_data)
#vosenesenskii <- bee_data[bee_data$Species == "vosnesenskii", ]
#melanopygus <- bee_data[bee_data$Species == "melanopygus",]
californicus <- bee_data[bee_data$Species == "californicus"]
#vosenesenskii <- bee_data[bee_data$Species == "vosnesenskii", ]
#melanopygus <- bee_data[bee_data$Species == "melanopygus",]
californicus <- bee_data[bee_data$Species == "californicus"]
#vosenesenskii <- bee_data[bee_data$Species == "vosnesenskii", ]
#melanopygus <- bee_data[bee_data$Species == "melanopygus",]
californicus <- bee_data[bee_data$Species == "californicus", ]
View(californicus)
#vosenesenskii <- bee_data[bee_data$Species == "vosnesenskii", ]
#melanopygus <- bee_data[bee_data$Species == "melanopygus",]
griseocollis <- bee_data[bee_data$Species == "griseocollis", ]
View(griseocollis)
head(bee_data)
# want to just keep our species from the main dataframe
filtered_bee_data <- bee_data[bee_data$Species %in% c("vosnesenskii", "melanopygus", "mixtus", "griseocollis"), ]
colnames(filtered_bee_data)
# want to keep Dec..Lat. and Dec..Long. and Collection.Date and Collection.Day.1
# https://stackoverflow.com/questions/50990412/select-remove-columns-under-conditions-in-dplyr-filter-columns-r
filtered_bee_data <- filtered_bee_data %>%
dplyr::select(Dec..Lat., Dec..Long., Collection.Date, Species, Year.1)
head(filtered_bee_data)
# removing these na rows
filtered_bee_data <- na.omit(filtered_bee_data)
calc_day_of_year <- function(date){
# converting the string object to a Date object
# parses mm/dd/yyyy
date <- mdy(date)
# get day of year
day_of_year <- yday(date)
return (day_of_year)
}
filtered_bee_data <- mutate(filtered_bee_data, DOY = calc_day_of_year(Collection.Date))
month <- seq(as.Date("2020-01-01"),
as.Date("2020-12-01"),
by = "1 month")
month_label <- lubridate::month(month, label = TRUE)
winter.months <- seq(as.Date("2020-09-01"),
as.Date("2021-08-01"),
by = "1 month")
winter.month_label <- lubridate::month(winter.months, label = TRUE)
filtered_bee_data <- filtered_bee_data %>%
mutate(Collection.Date=mdy(Collection.Date)
,year=as.numeric(year(Collection.Date))
,month=month(Collection.Date)
,doy = yday(Collection.Date)
) %>%
arrange(year,doy)
filtered_bee_data <- filtered_bee_data %>% rename(latitude = Dec..Lat., longitude = Dec..Long.)
filtered_bee_data <- mutate(filtered_bee_data,
winter.year = ifelse(month>8, year+1, year)
,winter.month = ifelse(month>8, month-8, month+4)
,winter.day = ifelse(month>8, doy-243, doy+120)
)
filtered_bee_data <- na.omit(filtered_bee_data)
dim(filtered_bee_data)
prism_set_dl_dir("prism_data")
get_prism_monthlys(
type = "tmean",
year=2016:2021,
mon=1:12,
keepZip = FALSE
)
#install.packages("lubridate")\
library(lubridate)
library(tidyverse)
library(tidyverse)
library(sp)
library(sf)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
bee_data <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
bee_data <- read.csv("OBA_2018-2023_combined_dataset_working.csv")
head(bee_data)
# want to just keep our species from the main dataframe
filtered_bee_data <- bee_data[bee_data$Species %in% c("vosnesenskii", "melanopygus", "mixtus", "griseocollis"), ]
colnames(filtered_bee_data)
# want to keep Dec..Lat. and Dec..Long. and Collection.Date and Collection.Day.1
# https://stackoverflow.com/questions/50990412/select-remove-columns-under-conditions-in-dplyr-filter-columns-r
filtered_bee_data <- filtered_bee_data %>%
dplyr::select(Dec..Lat., Dec..Long., Collection.Date, Species, Year.1)
head(filtered_bee_data)
# removing these na rows
filtered_bee_data <- na.omit(filtered_bee_data)
calc_day_of_year <- function(date){
# converting the string object to a Date object
# parses mm/dd/yyyy
date <- mdy(date)
# get day of year
day_of_year <- yday(date)
return (day_of_year)
}
filtered_bee_data <- mutate(filtered_bee_data, DOY = calc_day_of_year(Collection.Date))
month <- seq(as.Date("2020-01-01"),
as.Date("2020-12-01"),
by = "1 month")
month_label <- lubridate::month(month, label = TRUE)
winter.months <- seq(as.Date("2020-09-01"),
as.Date("2021-08-01"),
by = "1 month")
winter.month_label <- lubridate::month(winter.months, label = TRUE)
filtered_bee_data <- filtered_bee_data %>%
mutate(Collection.Date=mdy(Collection.Date)
,year=as.numeric(year(Collection.Date))
,month=month(Collection.Date)
,doy = yday(Collection.Date)
) %>%
arrange(year,doy)
filtered_bee_data <- filtered_bee_data %>% rename(latitude = Dec..Lat., longitude = Dec..Long.)
filtered_bee_data <- mutate(filtered_bee_data,
winter.year = ifelse(month>8, year+1, year)
,winter.month = ifelse(month>8, month-8, month+4)
,winter.day = ifelse(month>8, doy-243, doy+120)
)
filtered_bee_data <- na.omit(filtered_bee_data)
dim(filtered_bee_data)
prism_set_dl_dir("prism_data")
sub.tmean <- prism_archive_subset("tmean", "monthly", mon = 1:12)
RS <- pd_stack(sub.tmean) ##raster file   # (prism_stack and ls_prism_data deprecated)
