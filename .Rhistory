# adding scale bar
#?annotation_scale
annotation_scale(location = "tr") +
annotation_north_arrow(  height = unit(0.5, "cm"),
width = unit(0.5, "cm"))
ggplot() +
# map background of Oregon
geom_polygon(data = or, aes(x = lon, y = lat, group = group)) +
# bombus points
geom_sf(data = bombus_shp, alpha = 0.95, size = 0.5) +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20), color = "lightblue", alpha = 0.65) +
# filling the blocks based on population AND adding legend for this (using a binned color scale)
scale_fill_viridis_c(option="turbo", name = "Population", alpha = 0.6) +
# labels and title
labs(
title = "Population by Census Block in Oregon",
subtitle = "(Including vosnesenskii Distribution)",
x = "Longitude",
y = "Latitude",
caption = "The vosnesenskii seem to be more spread around the western half of Oregon, with most observations being from 120°W to 124°W. But within that longitudinal range, they span the whole latitudinal range of Oregon. Vosnesenskii also don't seem too concerned about differences in population between the different blocks, they look to have similar distributions in places with lower populations and higher populations. "
) +
theme(plot.caption.position = "plot", plot.caption = element_text(hjust = 0, vjust = 2))
ggplot() +
# map background of Oregon
geom_polygon(data = or, aes(x = lon, y = lat, group = group)) +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20), color = "lightblue", alpha = 0.65) +
# filling the blocks based on population AND adding legend for this (using a binned color scale)
scale_fill_viridis_c(option="turbo", name = "Population", alpha = 0.6) +
# labels and title
labs(
title = "Population by Census Block in Oregon",
subtitle = "(Including vosnesenskii Distribution)",
x = "Longitude",
y = "Latitude",
caption = "The vosnesenskii seem to be more spread around the western half of Oregon, with most observations being from 120°W to 124°W. But within that longitudinal range, they span the whole latitudinal range of Oregon. Vosnesenskii also don't seem too concerned about differences in population between the different blocks, they look to have similar distributions in places with lower populations and higher populations. "
) +
theme(plot.caption.position = "plot", plot.caption = element_text(hjust = 0, vjust = 2))
ggplot() +
# map background of Oregon
geom_polygon(data = or, aes(x = lon, y = lat, group = group)) +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20), color = "lightblue", alpha = 0.65) +
# # filling the blocks based on population AND adding legend for this (using a binned color scale)
# scale_fill_viridis_c(option="turbo", name = "Population", alpha = 0.6)
# #+
#     # adding scale bar
#     #?annotation_scale
#     annotation_scale(location = "tr") +
#   annotation_north_arrow(  height = unit(0.5, "cm"),
#   width = unit(0.5, "cm"))
#
```
ggplot() +
# map background of Oregon
geom_polygon(data = or, aes(x = lon, y = lat, group = group)) +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20), color = "lightblue", alpha = 0.65)
ggplot() +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20), color = "lightblue", alpha = 0.65) +
# map background of Oregon
geom_polygon(data = or, aes(x = lon, y = lat, group = group))
ggplot() +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20)) +
# map background of Oregon
geom_polygon(data = or, aes(x = lon, y = lat, group = group))
ggplot() +
# map background of Oregon
geom_polygon(data = or, aes(x = lon, y = lat, group = group)) +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20))
crs(or)
st_crs(or)
crs(bombus_shp)
typeof(or)
st_crs(bombus_shp)
or
View(or)
or_sf <- st_as_sf(or,
coords = c("lon", "lat"),
crs = st_crs("EPSG:4326"), na.fail = FALSE)
st_crs(or_sf)
# plotting!
ggplot() +
geom_polygon(data=or_sf, aes(x=lon, y=lat, group=group)) +
geom_sf(data = bombus_shp, aes(color = Species)) +
scale_color_viridis_d(name = "Species") +
ggtitle("4 Bombus sp. Observations Across Oregon") +
scale_color_manual(
values = c("red", "white", "forestgreen", "violet"), # Custom colors for each species
name = "Species"
)
View(or_sf)
# plotting!
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group)) +
geom_sf(data = bombus_shp, aes(color = Species)) +
scale_color_viridis_d(name = "Species") +
ggtitle("4 Bombus sp. Observations Across Oregon") +
scale_color_manual(
values = c("red", "white", "forestgreen", "violet"), # Custom colors for each species
name = "Species"
)
# match the census shape file with the crs of the or dataset
census_shp <- st_transform(census_shp, crs = st_crs(or))
# match the census shape file with the crs of the or dataset
census_shp <- st_transform(census_shp, crs = st_crs(or_sf))
ggplot() +
# map background of Oregon
geom_polygon(data = or, aes(x = lon, y = lat, group = group)) +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20))
ggplot() +
# map background of Oregon
geom_polygon(data = or, aes(x = lon, y = lat, group = group)) +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20)) +
# filling the blocks based on population AND adding legend for this (using a binned color scale)
scale_fill_viridis_c(option="turbo", name = "Population", alpha = 0.6)
ggplot() +
# map background of Oregon
#geom_polygon(data = or, aes(x = lon, y = lat, group = group)) +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20)) +
# filling the blocks based on population AND adding legend for this (using a binned color scale)
scale_fill_viridis_c(option="turbo", name = "Population", alpha = 0.6)
ggplot() +
# map background of Oregon
#geom_polygon(data = or, aes(x = lon, y = lat, group = group)) +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20)) +
# filling the blocks based on population AND adding legend for this (using a binned color scale)
scale_fill_viridis_c(option="turbo", name = "Population")
ggplot() +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20)) +
# filling the blocks based on population AND adding legend for this (using a binned color scale)
scale_fill_viridis_c(option="turbo", name = "Population") + ggtitle("Census Blocks of Oregon ")
ggplot() +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20))
ggplot() +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20)) +
# filling the blocks based on population AND adding legend for this (using a binned color scale)
scale_fill_viridis_c(option="turbo", name = "Population") + ggtitle("Census Blocks of Oregon ")
ggplot() +
# census block layer
geom_sf(data = census_shp, aes(fill = POPDENS20)) +
# filling the blocks based on population AND adding legend for this (using a binned color scale)
scale_fill_viridis_c(option="turbo", name = "Population") + ggtitle("Census Blocks of Oregon ")
ggplot() +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20)) +
# filling the blocks based on population AND adding legend for this (using a binned color scale)
scale_fill_viridis_c(option="turbo", name = "Population") + ggtitle("Census Blocks of Oregon ")
ggplot() +
# census block layer
geom_sf(data = census_shp, aes(fill = POP20)) +
# filling the blocks based on population AND adding legend for this (using a binned color scale)
scale_fill_viridis_c(option="turbo", name = "Population") + ggtitle("Census Blocks of Oregon ") +
xlab("lon") + ylab("lat")
View(complete_bee_data)
library(lubridate)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
library(lme4)
library(lmerTest)
library(car)
library(ggplot2)
library(ggeffects)
download.packages("ggeffects")
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group)) +
geom_sf(data = bombus_shp, aes(color = tmean_4))
ggplot() +
#geom_polygon(data=or, aes(x=lon, y=lat, group=group)) +
geom_sf(data = bombus_shp, aes(color = tmean_4))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group)) +
geom_sf(data = bombus_shp, aes(color = tmean_4)) +
scale_color_gradient(low="blue", high="red")
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group)) +
geom_sf(data = bombus_shp, aes(color = tmean_4)) +
scale_color_gradient(low="blue", high="red") + ggtitle("Average Temperatures (°C) in April")
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group)) +
geom_sf(data = bombus_shp, aes(color = tmean_4)) +
scale_color_gradient(low="lightblue", high="red") + ggtitle("Average Temperatures (°C) in April")
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group)) +
geom_sf(data = bombus_shp, aes(color = tmean_4)) +
scale_color_gradient(low="lightblue", high="pink") + ggtitle("Average Temperatures (°C) in April")
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group)) +
geom_sf(data = bombus_shp, aes(color = tmean_4)) +
scale_color_gradient(low="lightblue", high="red") + ggtitle("Average Temperatures (°C) in April")
library(lubridate)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
library(lme4)
library(lmerTest)
library(car)
library(ggplot2)
library(ggeffects)
download.packages(ggeffects)
install.packages("ggeffects")
library(lubridate)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
library(lme4)
library(lmerTest)
library(car)
library(ggplot2)
library(ggeffects)
library(ggpubr)
install.packages("ggpubr")
library(lubridate)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
library(lme4)
library(lmerTest)
library(car)
library(ggplot2)
library(ggeffects)
library(ggpubr)
#setwd("~/Bee-Urbanization-BI410")
complete_bee_data <- read_rds("Data/final_bee_dataset")
head(complete_bee_data)
# using quantile function and POP20
# if in quantile 1, give it a number 1
# if in quantile 2, assign it to number 2 etc
assign_urbanization_level <- function(data){
# initialize a list
urbanization_level <- list(nrow(data))
quantile_1 <- quantile(data$POP20, na.rm = TRUE)[1]
quantile_2 <- quantile(data$POP20, na.rm = TRUE)[2]
quantile_3 <- quantile(data$POP20, na.rm = TRUE)[3]
quantile_4 <- quantile(data$POP20, na.rm = TRUE)[4]
quantile_5 <- quantile(data$POP20, na.rm = TRUE)[5]
for (i in 1:nrow(data)){
if (quantile_1 <= (complete_bee_data$POP20[i]) && (complete_bee_data$POP20[i]) <= quantile_2){
append(urbanization_level, 1)
}
else if (quantile_2 < (complete_bee_data$POP20[i]) && (complete_bee_data$POP20[i]) <= quantile_3){
append(urbanization_level, 2)
}
else if (quantile_3 < (complete_bee_data$POP20[i]) && (complete_bee_data$POP20[i]) <= quantile_4){
append(urbanization_level, 3)
}
else if (quantile_4 < (complete_bee_data$POP20[i]) && (complete_bee_data$POP20[i]) <= quantile_5){
append(urbanization_level, 4)
}
}
}
# splitting POP20 into 4 even categories
complete_bee_data <- complete_bee_data %>%
mutate(urbanization_level = sapply(complete_bee_data$POP20, quantile(complete_bee_data$POP20, na.rm = TRUE)))
library(lubridate)
library(tidyverse)
library(sp)
library(sf)
library(raster)
library(prism)
library(terra)
library(lme4)
library(lmerTest)
library(car)
library(ggplot2)
library(ggeffects)
library(ggpubr)
#setwd("~/Bee-Urbanization-BI410")
complete_bee_data <- read_rds("Data/final_bee_dataset")
head(complete_bee_data)
# using quantile function and POP20
# if in quantile 1, give it a number 1
# if in quantile 2, assign it to number 2 etc
assign_urbanization_level <- function(data){
# initialize a list
urbanization_level <- list(nrow(data))
quantile_1 <- quantile(data$POP20, na.rm = TRUE)[1]
quantile_2 <- quantile(data$POP20, na.rm = TRUE)[2]
quantile_3 <- quantile(data$POP20, na.rm = TRUE)[3]
quantile_4 <- quantile(data$POP20, na.rm = TRUE)[4]
quantile_5 <- quantile(data$POP20, na.rm = TRUE)[5]
for (i in 1:nrow(data)){
if (quantile_1 <= (complete_bee_data$POP20[i]) && (complete_bee_data$POP20[i]) <= quantile_2){
append(urbanization_level, 1)
}
else if (quantile_2 < (complete_bee_data$POP20[i]) && (complete_bee_data$POP20[i]) <= quantile_3){
append(urbanization_level, 2)
}
else if (quantile_3 < (complete_bee_data$POP20[i]) && (complete_bee_data$POP20[i]) <= quantile_4){
append(urbanization_level, 3)
}
else if (quantile_4 < (complete_bee_data$POP20[i]) && (complete_bee_data$POP20[i]) <= quantile_5){
append(urbanization_level, 4)
}
}
}
# splitting POP20 into 4 even categories
complete_bee_data <- complete_bee_data %>%
mutate(urbanization_level = sapply(complete_bee_data$POP20, quantile(complete_bee_data$POP20, na.rm = TRUE)))
# splitting POP20 into 4 even categories
complete_bee_data <- complete_bee_data %>%
mutate(urbanization_level = sapply(complete_bee_data$POP20, quantile(complete_bee_data$POP20, na.rm = TRUE)))
library(dplyr)
library(dplyr)
library(ggplot2)
library(sf)
library(sf)
```{r Bombus observations across oregon}
complete_bee_data <- read_rds("Data/final_bee_dataset")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(dplyr)
library(ggplot2)
library(sf)
```{r Bombus observations across oregon}
complete_bee_data <- read_rds("Data/final_bee_dataset")
complete_bee_data <- read_rds("Data/final_bee_dataset")
library(dplyr)
library(ggplot2)
library(terra)
library(terra)
library(sf)
complete_bee_data <- read_rds("Data/final_bee_dataset")
getwd()
# making our data into a shapefile for plotting
bombus_shp <- st_as_sf(complete_bee_data,
coords = c("Dec..Long.", "Dec..Lat."),
crs = st_crs("EPSG:4326"), na.fail = FALSE
)
library(tidyverse)
complete_bee_data <- read_rds("Data/final_bee_dataset")
# making our data into a shapefile for plotting
bombus_shp <- st_as_sf(complete_bee_data,
coords = c("Dec..Long.", "Dec..Lat."),
crs = st_crs("EPSG:4326"), na.fail = FALSE
)
# downloading in the Oregon base map
or <- map_data("county", "oregon")%>%
dplyr::select(lon = long, lat, group, id = subregion)
# first need to create the extent from the or dataframe
min_long <- min(or$lon)
max_long <- max(or$lon)
min_lat <- min(or$lat)
max_lat <- max(or$lat)
or_extent <- c(xmin = min_long, xmax = max_long, ymin = min_lat, ymax = max_lat)
# create bounding box
bbox <- st_bbox(or_extent, crs = st_crs(bombus_shp))
# concert bbox to sf polygon
bbox_poly <- st_as_sfc(bbox)
# crop shapefile using bounding box
cropped_bombus_shp <- st_intersection(bombus_shp, bbox_poly)
# using the temperatures in April/beginning of spring is what I was thinking
complete_bee_data <- cropped_bombus_shp %>%
rowwise() %>%
mutate(springTemp = mean(c_across(c("tmean_6", "tmean_7",
"tmean_8", "tmean_9", "tmean_10")), na.rm = TRUE)) %>%
ungroup()
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group, color = "beige")) +
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="lightblue", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group, fill = "beige")) +
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="lightblue", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group, color = "tan"))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "beige")
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), fill = "beige")
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), fill = "beige")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="lightblue", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "beige")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="lightblue", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "beige")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="lightblue", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "beige")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="blue", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "beige")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="blue", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "beige")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="lightblue", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="lightblue", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="white", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="lightblue", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="white",medium = "lightblue", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(low="white", high="red") + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient(palette.pals()) + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient() + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient2() + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradientn() + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradientn(colors=4) + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradientn(colors=1) + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient2(low = "blue",
mid = "lightblue",
high = "red",
midpoint = .02) + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient2(low = "white",
mid = "lightblue",
high = "red",
midpoint = .02) + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient2(low = "white",
mid = "blue",
high = "red",
midpoint = .02) + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient2(low = "white",
mid = "blue",
high = "red",
midpoint = .02) + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5)) + xlab("Longitude") + ylab("Latitude")
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient2(low = "white",
mid = "blue",
high = "red",
midpoint = .02, name = "Temperature (°C)" ) + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5)) + xlab("Longitude") + ylab("Latitude")
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "beige")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient2(low = "white",
mid = "blue",
high = "red",
midpoint = .02, name = "Temperature (°C)" ) + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5)) + xlab("Longitude") + ylab("Latitude")
ggplot() +
geom_polygon(data=or, aes(x=lon, y=lat, group=group), color = "black", fill = "tan")+
geom_sf(data = complete_bee_data, aes(color = springTemp)) +
scale_color_gradient2(low = "white",
mid = "blue",
high = "red",
midpoint = .02, name = "Temperature (°C)" ) + ggtitle("Average Spring (Feb-June) Temperatures (°C)") + theme(plot.title = element_text(hjust = 0.5)) + xlab("Longitude") + ylab("Latitude")
